
obigstore: multi-dimensional DB with BigTable-like data model atop LevelDB
==========================================================================
Copyright (C) 2012 Mauricio Fernandez <mfp@acm.org>

obigstore is a database server + client library and associated tools. It
exposes a multidimensional BigTable-like data model built on top of the Google
LevelDB library, inheriting its fundamental strengths, such as fast random
writes or control over the physical data layout.  It can be used in a
client/server setting or as an embedded database.

obigstore's salient features include:

* strong data durability guarantees:
  * fully fsync'ed writes with group commit
  * synchronous and asynchronous replication
  * data integrity ensured with CRCs at the protocol level
* rich semi-structured data model:
  * atomic transactions (both read-committed and repeatable-read isolation levels)
  * optimistic and pessimistic concurrency control
  * asynchronous notifications
  * limited support for complex documents (BSON serialized)
* performance:
  * fast random writes
  * efficient access to data ranges, thanks to spatial locality
  * cross-record redundancy reduction at the page level (compression)
  * fast recovery (independent of dataset size)

obigstore currently includes:
* the (embeddable) database library
* a server + client library
* a friendly REPL for interactive data manipulation
* DB dump/restore tools

Limitations
-----------
* transactions must fit in memory
* no direct support for infinite horizontal scalability yet (i.e., you'd have to
  partition manually on key ranges at this point)
* no automatic failover yet

Requirements
------------

(Debian package names parenthesized)

* OCaml >= 3.12.0 (ocaml-nox)
* omake to build (omake)
* GCC with C++ frontend (g++)
* OCaml Batteries (libbatteries-ocaml-dev)
* Cryptokit (libcryptokit-ocaml-dev)
* Lwt (liblwt-ocaml-dev)
* oUnit for the unit tests  (libounit-ocaml-dev)
* extlib (libextlib-ocaml-dev)

Building
--------
Just 

   $ omake

should do. This will build the server, client programs and libraries.
You can run the tests with

   $ omake test

The generated executables are:

* obigstore: the DB server
* ob_repl: the REPL
* ob_dump: tool to dump a DB to a file
* ob_load: tool to load ob_dump's output into a DB
